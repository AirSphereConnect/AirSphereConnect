package com.airSphereConnect.utils;

public class AirQualityAlertUtils {
    public AirQualityAlertUtils() {

    }

    /**
     * G√©n√®re un message d'alerte selon l'indice ATMO (1-6)
     *
     * @param atmoIndex Indice de qualit√© de l'air (1-6)
     * @return Message d'alerte ou null si qualit√© acceptable
     */
    public static String determineAlertMessage(Integer atmoIndex) {
        if (atmoIndex == null) return null;

        return switch (atmoIndex) {
            case 1, 2 -> null; // Qualit√© bonne √† tr√®s bonne
            case 3 -> "Qualit√© de l'air moyenne - Personnes sensibles : soyez vigilants";
            case 4 -> "‚ö†Ô∏è Qualit√© de l'air d√©grad√©e - Personnes sensibles : limitez les activit√©s physiques intenses";
            case 5 -> "üö® Qualit√© de l'air mauvaise - √âvitez les efforts prolong√©s. Personnes sensibles : restez √† l'int√©rieur";
            case 6 -> "üî¥ Qualit√© de l'air tr√®s mauvaise - Population g√©n√©rale : r√©duisez les activit√©s physiques";
            default -> null;
        };
    }

    /**
     * G√©n√®re un message d'alerte avec nom de zone
     *
     * @param atmoIndex Indice de qualit√© de l'air (1-6)
     * @param areaName Nom de la zone concern√©e
     * @return Message d'alerte format√© avec le nom de la zone
     */
    public static String determineAlertMessageWithArea(Integer atmoIndex, String areaName) {
        String baseMessage = determineAlertMessage(atmoIndex);

        if (baseMessage == null || areaName == null) {
            return baseMessage;
        }

        return String.format("%s (Zone : %s)", baseMessage, areaName);
    }
}
